# Doji Scalp Strategy - 项目开发记录

## 项目概述
基于 Heikin Ashi K线和100 EMA的1分钟剥头皮策略，采用状态机管理交易流程，通过识别"回调-修复-高量Doji"的市场结构来生成交易信号。

## 核心设计思路

### 1. 分层架构设计
采用三层解耦架构，实现了信号生成与交易执行的分离：

```
信号生成层: DojiScalpSignalGenerator
     ↓
核心执行层: CoreExecutor  
     ↓
框架适配层: BacktraderAdapter / LiveTradingAdapter / ...
```

**设计优势:**
- **可复用**: 信号生成器独立于框架，可用于不同环境
- **可测试**: 各组件可独立单元测试  
- **可扩展**: 轻松添加新的交易框架适配器
- **解耦合**: 策略逻辑与执行机制分离

### 2. 状态机驱动的交易逻辑

#### 策略状态
- `FINDING_STRUCTURE`: 寻找市场结构（回调+修复循环）
- `FINDING_ENTRY_SIGNAL`: 市场结构确认后，等待入场信号

#### 状态转换逻辑
1. **趋势判定**: HA_Open和HA_Close同时在EMA同侧
2. **回调识别**: 连续≥2根干净反色蜡烛
3. **修复确认**: 回调后连续≥2根主趋势颜色K线
4. **入场信号**: 高量Doji满足特定条件

### 3. 技术指标实现

#### Heikin Ashi计算
```python
HA_Close = (O + H + L + C) / 4
HA_Open = (prev_HA_O + prev_HA_C) / 2  # 第一根用原始Open
HA_High = max(H, HA_O, HA_C)
HA_Low = min(L, HA_O, HA_C)
```

#### EMA指标
- 周期: 100
- 输入: HA_Close（非原始收盘价）
- 用途: 趋势方向判定基准

### 4. 交易信号规则

#### 干净反色蜡烛定义
- 上升趋势中: 红色K线（收跌）且无上影线
- 下降趋势中: 绿色K线（收涨）且无下影线

#### Doji判定标准  
- 实体高度 ≤ 10% * (High - Low)
- 上下影线长度比 ∈ [0.8, 1.25]

#### 高量Doji入场条件
1. 当前K线为Doji
2. 前两根为连续干净反色蜡烛
3. 当前high-low范围 > 前两根各自的80%
4. 当前成交量 > 前两根各自的80%

### 5. 风险管理

#### 头寸管理
- 固定1:1风险回报比
- 每方向最多1个头寸
- 基于Doji的高低点设置止盈止损

#### 入场价格
- 做多: Doji High
- 做空: Doji Low

#### 止损止盈
- 做多: 止损=Doji Low, 止盈=Doji High + (High-Low)
- 做空: 止损=Doji High, 止盈=Doji Low - (High-Low)

## 代码结构

### 核心文件
- `strategy.py`: 信号生成器和基础计算器
- `strategy_executor.py`: 核心执行器和框架适配器抽象
- `backtrader_adapter.py`: Backtrader框架适配器  
- `backtest.py`: 回测脚本
- `INSTRUCTION.md`: 原始策略规范文档

### 关键类说明

#### DojiScalpSignalGenerator
- **职责**: 纯信号生成，无副作用
- **输入**: OHLCV数据流
- **输出**: TradingSignal对象或None
- **状态**: 内部维护趋势判定和市场结构状态

#### CoreExecutor  
- **职责**: 头寸管理、风控、统计
- **功能**: 信号筛选、止盈止损检查、交易指标计算
- **无关**: 具体交易执行方式

#### BacktraderAdapter
- **职责**: Backtrader框架集成
- **功能**: 订单提交、执行状态管理、进度报告
- **继承**: bt.Strategy

### TradingSignal数据结构
```python
TradingSignal(
    direction: 'long'/'short',
    entry_price: float,
    stop_loss: float, 
    take_profit: float,
    timestamp: datetime,
    signal_id: str
)
```

## 回测设置

### 数据配置
- 交易品种: BTCUSDT
- 时间周期: 2022年全年  
- K线周期: 1分钟
- 数据源: Binance历史数据

### 回测参数
- 初始资金: 10,000 USDT
- 手续费率: 0% (简化处理)
- 最大持仓: 1个方向1个头寸
- 头寸大小: 1单位

### 性能监控
- 每500条数据报告进度
- 实时显示信号数量和完成交易数
- 完整的交易统计和风险指标

## 技术债务和待优化点

### 已知限制
1. **时区处理**: 当前忽略交易时段过滤
2. **滑点模拟**: 未考虑市场冲击成本
3. **资金管理**: 固定头寸大小，未实现动态配置

### 扩展方向
1. **多品种**: 并行运行多个信号生成器
2. **实盘集成**: 实现针对具体券商的适配器
3. **参数优化**: 暴露关键参数供优化
4. **风控增强**: 添加最大回撤保护、资金曲线管理

### 代码质量
- 类型提示完整
- 文档字符串清晰
- 单一职责原则
- 依赖注入设计

## 测试验证

### 单元测试范围
- HA计算正确性
- EMA指标精度  
- 状态转换逻辑
- 信号生成条件

### 集成测试
- 端到端回测流程
- 不同市场条件下的表现
- 极端情况处理

## 部署说明

### 运行环境
- Python 3.8+
- 依赖: pandas, numpy, backtrader, requests
- 数据缓存: 自动下载并缓存历史数据

### 执行命令
```bash
# 运行回测
uv run python -m doji_scalp.backtest

# 查看详细日志（设置debug=True）
# 修改backtrader_adapter.py中的debug参数
```

### 输出文件
- 交易记录CSV: `doji_scalp_trades_BTCUSDT_20220101_20221231.csv`
- 控制台输出: 完整的回测统计报告

## 版本历史

### v1.0 (当前版本)
- 实现基础策略逻辑和状态机
- 完成Backtrader集成
- 添加进度监控和详细统计
- 分层架构重构

### 下一版本计划
- 添加参数优化功能  
- 实现实盘交易适配器
- 增强风险管理模块
- 多品种并行支持